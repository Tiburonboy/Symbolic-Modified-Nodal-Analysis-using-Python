---
title: ""
format:
  html:
    code-fold: false
jupyter: python3
---
# Introduction {#sec-Introduction}    
Circuit analysis and theory are fundamental to electrical engineering and is usually one of the first topics taught to electrical engineering students. The purpose of this book is to describe a circuit analysis method called [Modified Nodal Analysis](https://en.wikipedia.org/wiki/Modified_nodal_analysis) (MNA) implemented in Python and using the SymPy library. The Python programming language along with its packages and libraries provide powerful computational tools that make solving math problems extremely easy with just a few lines of code. SymPy and NumPy are the main libraries used to perform the types of circuit analysis problems described in this book. In this chapter the following Python libraries are used.

```{python}
#| echo: true
import sys
from IPython.display import display, Markdown, Math, Latex
from sympy import *
from scipy import signal
import matplotlib.pyplot as plt
import numpy as np
init_printing()
```

The [sys](https://docs.python.org/3/library/sys.html) module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. [IPython.display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html) is a public API for display tools in [IPython](https://ipython.org/). [SymPy](https://www.sympy.org/en/index.html) is a Python library for symbolic mathematics. 
[SciPy](https://scipy.org/) is a collection of algorithms for scientific computing. [Matplotlib](https://matplotlib.org/) is a comprehensive library for creating static, animated, and interactive visualizations in Python. 
[NumPy](https://numpy.org/) is a package for scientific computing with Python. The function [init_printing()](https://docs.sympy.org/latest/tutorials/intro-tutorial/printing.html) will automatically enable the best printer available in the Python environment.

The following example shows some typical frequency domain circuit equations and the solution. Consider the following system of equations,

$- C_{1} s v_{2} + v_{1} \left(C_{1} s + C_{2} s + \frac{1}{R_{3}}\right) = 0$  
$- C_{1} s v_{1} + v_{2} \left(C_{1} s + \frac{1}{R_{2}}\right) - \frac{v_{3}}{R_{2}} = 0$  
$I_{V1} - \frac{v_{2}}{R_{2}} + \frac{v_{3}}{R_{2}} = 0$  
$v_{3} = V_{1}$ 

where, $C_1$ and $C_2$ are the capacitors in an electrical circuit, $R_2$ and $R_3$ are the resistors, $v_1$, $v_2$ and $v_3$ are the unknown node voltages, $V_1$ is the input voltage source and $I_{V1}$ is the unknown current flowing through $V_1$, can be entered into SymPy to get the equations in matrix form:

```{python}
#| echo: false
R2, C2, v1, C1, s, v3, v2, V1, R3, I_V1 = symbols('R2 C2 v1 C1 s v3 v2 V1 R3 I_V1')
A = Matrix([[C1*s + C2*s + 1/R3, -C1*s, 0, 0], [-C1*s, C1*s + 1/R2, -1/R2, 0], [0, -1/R2, 1/R2, 1], [0, 0, 1, 0]])
X = Matrix([v1, v2, v3, I_V1])
Z = Matrix([0, 0, 0, V1])

equ = Eq(A*X,Z)
equ
```

The system of equations can be easily solved to obtain a symbolic solution.

```{python}
#| echo: false
U_sym = solve(equ,X)

temp = ''
for i in U_sym.keys():
    temp += '${:s} = {:s}$<br>'.format(latex(i),latex(U_sym[i]))

Markdown(temp)
```

The solution for the voltage transfer function $H_{sym} = v_2/v_3$ is:

```{python}
#| echo: false
H_sym = (U_sym[v2]/U_sym[v3]).simplify()
H_sym
```

```{python}
#| echo: false
numerator, denominator = fraction(H_sym)

```
The zeros of $H_{sym}$ are obtained by taking the numerator and solving for $s$, the result is:

```{python}
#| echo: false
solve(numerator,s)
```

```{python}
#| echo: false
p = solve(denominator,s)
```
The poles of $H_{sym}$ are obtained by taking the denominator and solving for $s$. There are two solutions and the first is:

```{python}
#| echo: false
p[0]
```
The second pole of $H_{sym}$ is:

```{python}
#| echo: false
p[1]
```

The following numerical values can be assigned to the component symbols.

```{python}
#| echo: false
Values = {R2:1000, R3:1000, C1:1e-6, C2:10e-6, V1:1}
for k,v in Values.items():
    print('{:s} = {:s}'.format(str(k), str(v)))
```

The values can be substituted for the symbols and the following system equations are obtained:

```{python}
#| echo: false
equ1a = equ.subs(Values)
equ1a
```

The numerical solution to the system of equations is:

```{python}
#| echo: false
U = solve(equ1a,X)

temp = ''
for i in U.keys():
    temp += '${:s} = {:s}$<br>'.format(latex(i),latex(U[i]))

Markdown(temp)
```

The frequency domain voltage transfer function $H = v_2/v_3$ can be obtained: 

```{python}
#| echo: false
H = (U[v2]/U[v3]).simplify()
H
```

```{python}
#| echo: false
H_num, H_denom = fraction(H) #returns numerator and denominator

# convert symbolic to numpy polynomial
a = np.array(Poly(H_num, s).all_coeffs(), dtype=float)
b = np.array(Poly(H_denom, s).all_coeffs(), dtype=float)
H_sys = signal.TransferFunction(a,b)

sys_zeros = np.roots(H_sys.num)
sys_poles = np.roots(H_sys.den)
```

The poles and zeros of the frequency domain transfer function are plotted.

```{python}
#| echo: false
plt.plot(np.real(sys_zeros), np.imag(sys_zeros), 'ob', markerfacecolor='none')
plt.plot(np.real(sys_poles), np.imag(sys_poles), 'xr')
plt.legend(['Zeros', 'Poles'], loc=1)
plt.title('Pole / Zero Plot')
plt.xlabel('real part, \u03B1')
plt.ylabel('imaginary part, j\u03C9')
plt.grid()
plt.show()
```

The SciPy function [bode](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.bode.html) to plot the magnitude and phase of $H$.

```{python}
#| echo: false
x = np.logspace(1, 5, 200, endpoint=False)*2*np.pi
w, mag, phase = signal.bode(H_sys, w=x) # returns: rad/s, mag in dB, phase in deg

fig, ax1 = plt.subplots()
ax1.set_ylabel('magnitude, dB')
ax1.set_xlabel('frequency, Hz')

plt.semilogx(w/(2*np.pi), mag,'-b')    # Bode magnitude plot

ax1.tick_params(axis='y')
#ax1.set_ylim((-30,20))
plt.grid()

# instantiate a second y-axes that shares the same x-axis
ax2 = ax1.twinx()
color = 'tab:red'

plt.semilogx(w/(2*np.pi), phase,':',color='tab:red')  # Bode phase plot

ax2.set_ylabel('phase, deg',color=color)
ax2.tick_params(axis='y', labelcolor=color)
#ax2.set_ylim((-5,25))

plt.title('Magnitude and phase response')
plt.show()
```

The SciPy functions [impulse2](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.impulse2.html) and [step2](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.step2.html) to plot the impulse and step response of the system.

```{python}
#| echo: false
# impulse response
t, y = signal.impulse2(H_sys,N=500)
plt.plot(t, y)
plt.title('Impulse response')
plt.ylabel('volts')
plt.xlabel('time, sec')
plt.grid()

# show plot
plt.show()
```
The step response is shown below.

```{python}
#| echo: false
t, y = signal.step2(H_sys,N=500)
plt.plot(t, y)
plt.title('Step response')
plt.ylabel('volts')
plt.xlabel('time, sec')
plt.grid()

# show plot
plt.show()
```

Matrix and polynomial math can be performed with hardly any effort with the help of SymPy. The code used to perform the calculations above and display the results is embeded in this mark down document, but is hidden from display. The code can be examined by looking at the orginal markdown document for this chapter or the example and validation chapters later in this book.  

## JupyterLab
All the validation and problem circuits are presented in JupyterLab notebooks and rendered into chapters by Quarto. 

**Variable names**  
I've tried to be consistent with the use of variable names throughout the Jupyter notebooks. Resistors, capacitors and inductors use R, L and C as reference designators. The names chosen for the other variables are listed in @tbl-variable-names

| Variable name | definition |
|---|---|
| NE_sym | Network equations, symbolic |
| NE | Network equations with component values  |
| NE_dc | Network equations with $s=0$  |
| NE_w1 | Network equations with $s=j \omega$ and $\omega$ equal to a numeric value |
| U_sym | The solution to the symbolic network equations |
| U | The solution to network equations with component values |
| U_ac | The solution to network equations at some frequency |
| H_sym | system transfer function, symbolic |
| H | System transfer function with component values |
| $V_1, V_2,$ ... | Capital  letter V for independent voltage sources |
| $v_1, v_2,$ ... | Small letter v for the node voltages |
| $I_1, I_2,$ ... | Capital letter I for independent current sources  |
| $R_1, R_2,$ ... | Capital letter R for resistors |
| $L_1, L_2,$ ... | Capital letter L for inductors |
| $C_1, C_2,$ ... | Capital letter C for capacitors |
| E | Voltage controlled voltage source (VCVS) |
| F | Current controlled current source (CCCS) |
| G | Voltage controlled current source (VCCS) |
| H | Current controlled voltage source (CCVS) |
| $K_1, K_2,$ ... | Inductor coupling coefficients |
| $M_1, M_2,$ ... | Mutual inductances |
| $O_1, O_2,$ ... | Op Amp components |
| A | Connectivity matrix |
| X | Unknown voltages and currents vector |
| Z | Known voltages and currents vector |
: Variable names {#tbl-variable-names} {tbl-colwidths="[20,80]"}

**Large exponents**  
The values of the exponents can be very large in the numerical solution to the network equations when using real component values. Often you will see in engineering text books that the author uses normalized component values, where the values have been frequency and impedance scaled to a frequency of $\omega = 1$ and one of the resistors or other components normalized to a value of one. This keeps the numerical values obtained in the solution to the network equations from getting very large or small. 

Almost all platforms map Python floats to the IEEE754 double precision - 64 total bits. Using the sys package, the float information is reported as follows:

```{python}
#| echo: false
temp = str(sys.float_info)
temp = temp[temp.find("(")+1:temp.find(")")]
sys_float_info = temp.split(',')

for i in sys_float_info:
    print(i)
```

The maximum exponent that Python can use is 308. In this book, I'm going to let Python do the math and not worry about the size of the exponents. I suppose that large exponents don't become a problem as long as they remain under two digits.

## Practical network size for symbolic solutions
Test circuit number 4, @sec-test_4, has 26 branches, 13 nodes, 18 resistors, 4 independent sources and 4 dependent sources. A symbolic solution for this problem was taking too long on my i3-8130U 2.20GHz computer, so I interrupted the kernel, and proceeded with a numerical solution, which can be solved quite quickly. The complexity of a circuit can be reduced by letting some components have the same value, for example $R_1 = R_2 = R_3 = R$, which would reduce the number of symbols that are being manipulated. 

Another circuit, shown below, a 100 Hz low pass elliptic function filter, is an example of a circuit where the size of the symbolic expressions became too large and the number of terms too great to allow any reasonable interpenetration of the circuit’s operation. The Python kernel needed to be interrupted during the symbolic solution. After actual component values are substituted into the network equations a numerical solution was easily obtained by SymPy, see @sec-elliptic-function for this circuit's notebook.

![Elliptic function low pass filter](Elliptic-function-VCVS-LPF.png)  

The net list for this circuit is:  
```
R3 3 0 4750
R4 5 0 73.2e3
R1 4 1 9530
R2 5 4 9530
R7 2 7 10e3
C1 3 1 0.05e-6
C2 5 3 0.05e-6
C3 7 4 0.1e-6
C4 5 0 0.22e-6
C5 2 0 0.18e-6
O1 6 5 7
V1 1 0 1
R5 6 0 10e3
R6 7 6 44.2e3
```
The following circuit equations were generated by the MNA code in less than one second: 

$- C_{1} s v_{3} + I_{V1} + v_{1} \left(C_{1} s + \frac{1}{R_{1}}\right) - \frac{v_{4}}{R_{1}} = 0$  
$v_{2} \left(C_{5} s + \frac{1}{R_{7}}\right) - \frac{v_{7}}{R_{7}} = 0$  
$- C_{1} s v_{1} - C_{2} s v_{5} + v_{3} \left(C_{1} s + C_{2} s + \frac{1}{R_{3}}\right) = 0$  
$- C_{3} s v_{7} + v_{4} \left(C_{3} s + \frac{1}{R_{2}} + \frac{1}{R_{1}}\right) - \frac{v_{5}}{R_{2}} - \frac{v_{1}}{R_{1}} = 0$  
$- C_{2} s v_{3} + v_{5} \left(C_{2} s + C_{4} s + \frac{1}{R_{4}} + \frac{1}{R_{2}}\right) - \frac{v_{4}}{R_{2}} = 0$  
$v_{6} \cdot \left(\frac{1}{R_{6}} + \frac{1}{R_{5}}\right) - \frac{v_{7}}{R_{6}} = 0$  
$- C_{3} s v_{4} + I_{O} + v_{7} \left(C_{3} s + \frac{1}{R_{7}} + \frac{1}{R_{6}}\right) - \frac{v_{2}}{R_{7}} - \frac{v_{6}}{R_{6}} = 0$  
$v_{1} = V_{1}$  
$- v_{5} + v_{6} = 0$  

After about two hours running on an i3 machine a symbolic solution was obtained, but it's too long to display and doesn't offer too much insight into the function of the circuit.

After substituting numerical values for the components, the following solution for the voltage at node 2 was obtained in less than one second.

$\frac{4.30028181226968 \cdot \left(1.0784981875 \cdot 10^{-10} s^{3} + 2.263375 \cdot 10^{-7} s^{2} + 0.000474999999999999 s + 1.0\right)}{1.50943922351291 \cdot 10^{-12} s^{4} + 4.7350839034956 \cdot 10^{-9} s^{3} + 4.53071325287237 \cdot 10^{-6} s^{2} + 0.00311443743767615 s + 1.0}$  

See @sec-2nd-order-brf for a reduced complexity version of the schematic above, for which a symbolic solution was obtained in less than one second.

Python together with SymPy has enabled the ability to explore circuit analysis problems without having to resort to pages and pages of hand calculations. The results can then be displayed with good looking graphics and [LaTex](https://en.wikipedia.org/wiki/LaTeX) rendered equations.

## Linear and nonlinear circuits
The Python code in the book supports [linear circuit](https://en.wikipedia.org/wiki/Linear_circuit) analysis. The element types - resistors, capacitors, inductors, independent and dependent sources are all linear, therefore the circuits that are modeled using these element types are linear circuits. A linear circuit is a circuit where the [superposition principle](https://en.wikipedia.org/wiki/Superposition_principle) is valid.

Non-linear circuit elements, such as diodes and transistors, are not supported. It might be possible to modify the Python code to support non-linear circuit elements and generate valid network equations, but finding solutions to nonlinear network equations is difficult and outside the scope of this book.

## State variables
A topic that is sometimes included in engineering text books on circuit analysis is state variable analysis. State variable analysis is a method of describing the electrical network in terms of a set of first order differential equations, see @Hayt1978, chapter 17 and @Haykin1970, chapter 2. The normal form of the state equations and the analysis approach relies on a network topology where energy storage elements, typically the capacitors and inductors, are placed in the network tree and equations are written in normal form. Deriving a of state equations is not is not included in the scope of this book. Typically there is a state equation for each inductor and capacitor, whereas the MNA approach writes network equations based primarily on unknown node voltages.

## Pros and cons of MNA
The MNA approach is a suitable technique for hand analysis of small circuits as well as for computer analysis of larger circuits using the same algorithm as illustrated in this book. The only disadvantage of the MNA technique is that often additional equations are generated, when a smaller number would be sufficient. For students doing homework problems and solving sets of equations by hand, the extra equation or two, generated by the MNA technique makes matrix inversions much harder. Modern pocket scientific calculators that engineering students now use can solve sets of linear equations relatively easily. However, some effort is required to enter the equations into the calculator. 

When a computer is used to generate the schematic for a circuit and the net list is exported to the Python code, the extra equations that the MNA approach generates is not a practical concern. Using the examples in this book as templates for problem solving makes the work flow very easy, which is the main benefit of using MNA.
