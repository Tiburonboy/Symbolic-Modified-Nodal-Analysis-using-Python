# Preface {#sec-Preface .unnumbered}

This book describes a Python coding project that I started a few years ago. Over the years I've put the code on [Github](https://github.com/) along with some test circuits and documentation. I think I have enough interesting content that I'm able to turn the effort into an online book.

The nodal analysis code started as a translation from some C code to generate a nodal admittance matrix that I had written in 1988. I wrote this code for two reasons. Free versions of Spice for the PC didn't exist at the time and I wanted to use some of the code from the book, [Numerical Recipes in C](https://www.amazon.com/Numerical-Recipes-Art-Scientific-Computing/dp/B000P6EEEC). The original C code worked well and calculated numeric solutions. I then started writing some C code to generate the matrices with symbolic values and then intended to use LISP to symbolically solve the equations. I didn’t get too far with this effort. The LISP code would generate huge symbolic strings with no simplification. The output was a big pile of trash that was not in the least bit useful or decipherable.

In 2014, I started to use python for my little coding projects and engineering calculations. There are some nice python libraries for numeric and symbolic calculations (such as numpy and sympy), so I decided to try writing a python script to generate the node equations based on the old C code I had written many years before. Part way into this project I discovered that there is a new nodal analysis technique being taught today in engineering school called [The modified nodal approach to network analysis](https://spinningnumbers.org/assets/MNA75.pdf). My motivation for reviving this coding project is my continued interest in circuit analysis and synthesis. 

The modified nodal analysis provides an algorithmic method for generating systems of independent equations for linear circuit analysis. Some of my younger colleagues at work were taught this method, but I never heard of it until a short time ago. These days, I never really analyze a circuit by hand, unless it’s so simple that you can almost do it by inspection. Most problems that an electrical engineer encounters on the job are complex enough that they use computers to analyze the circuits. [LTSpice](https://www.analog.com/en/design-center/design-tools-and-calculators/ltspice-simulator.html) is the version of spice that I use, since it’s free and does a good job converging when analyzing switching circuits.

My code started initially by following Erik Cheever's [Analysis of Resistive Circuits](http://www.swarthmore.edu/NatSci/echeeve1/Ref/mna/MNA1.html), which used [MATLAB](https://www.mathworks.com/products/matlab.html) to generate modified nodal equations. I somewhat followed his MATLAB code for resistors, capacitors, opamps and independent sources. The naming of the matrices follows his convention. The preprocessor and parser code was converted from my old C code. The use of Pandas for a data frame is new and SymPy is used to do the math and the use of element stamps is from [ECE 570 Session 3, Computer Aided Engineering for Integrated Circuits](http://www2.engr.arizona.edu/~ece570/session3.pdf) .

Inductors are being addressed in the D matrix, which is different than the way Erik Cheever's code works. Erik's code puts inductors into the G matrix as 1/s/L. My code puts the inductor contribution into the D matrix. Coupled inductors also affect the D matrix, so it makes sense to allow the inductors to be in the D matrix rather than the G matrix.

## Survey of other symbolic circuit analysis code
The python code presented in this notebook is somewhat unique since python is open source, free and runs on a variety of platforms, the code presented in this ipython notebook is portable. As described in the About this book, this code is made available under a public domain licence and archived in a github [repository](https://github.com/Tiburonboy/Symbolic-modified-nodal-analysis). 

There are other symbolic circuit analysis codes available and some of these are described here. Some of these codes are based on commercial software such as MATLAB, [TINA](https://www.tina.com/) and [Maple](https://www.maplesoft.com/). 

[SLiCAP](https://www.analog-electronics.eu/slicap/slicap.html) is a symbolic linear analysis tool. SLiCAP runs in MATLAB. 

TINA is an acronym of Toolkit for Interactive Network Analysis. The TINA design suite is a circuit simulator and PCB design software package for analyzing, designing, and real time testing of analog, digital, HDL, MCU, and mixed electronic circuits and their PCB layouts. TINA has some [symbolic analysis capability](https://www.tina.com/symbolic-analysis).

Maple is a mathematical package and there is an application [note](https://www.maplesoft.com/applications/view.aspx?SID=1427) available describing it use in symbolic circuit analysis. The application note presents an method for evaluating, solving and designing a common, but not so simple pulse-mode high-gain transimpedance amplifier or TIA circuit. 

[Symbolic Circuit Analysis](https://rodanski.net/ben/work/symbolic/index.htm) is a web page devoted to symbolic circuit analysis. 

[SAPWIN](http://www.ewh.ieee.org/soc/es/May2001/12/Begin.htm) is a windows program package for symbolic and numerical simulation of analog circuits.

[Lcapy](https://github.com/mph-/lcapy) is an experimental Python package for teaching linear circuit analysis. It uses SymPy for symbolic mathematics. 

## Chapter contents
After the introduction, this book is organized into several parts. Chapter 2 describes the theory behind Modified Nodal Analysis. Chapter 3 walks through a circuit analysis problem from net list generation to AC analysis and generation of a Bode plot of the frequency response of the circuit. There are 13 circuits that were used to validate the Python code. These circuits range from simple circuits that you would find in text books, to complex circuits that would be very difficult to analysis if not for computers. There are also a couple of test circuits designed to generate matrices of all zeros during the solution. The last part of the book is a collection of interesting circuits (at least to me) that showcase the power and ease which the Python code and solve circuit analysis problems.  
