---
title: ""
format:
  html:
    code-fold: false
jupyter: python3
---
# SMNA function {#sec-SMNA-func}
The python code described in @sec-example has been converted into a function called smna(netlist). A listing for the function can be found in @sec-SymMNA_py as well as on GitHub linked [here](https://github.com/Tiburonboy/Symbolic-modified-nodal-analysis).

The function implements the MNA method on a circuit’s netlist. Stamps which are templates for modifying the B, C and D matrices are used to facilitate the construction of the matrices. The stamps used in this implementation of the MNA follow the stamps of @Palusinski2005. The code is divided in the following sections.  

- The preprocessor reads in the netlist text file and removes comments, extra spaces and blank lines. The first letter of the element type is capitalized to make subsequent parsing of the file easier. The number of lines are counted and the number of entries on each line are checked to make sure the count is consistent with the element type.
- The parser code loads the preprocessed netlist into a data frame.  A report is generated which consists of a count of the element types in the netlist.  
- Matrix formulation: Each of the matrices and vectors are generated.  
- Circuit equation generation: The circuit equations are generated in a for loop. Sympy automatically does some simplification according to its default settings. The Laplace variable s is used when inductors and capacitors are included in the circuit.  

There is a limited amount of error checking performed. The number of items on each line in the netlist is checked to make sure the count is correct depending on the element type. The node numbering needs to be consecutive with no skipped numbers, otherwise empty rows or columns will be included in the matrix. Unknown element types create an error.

The function takes one argument which is a text string that is the circuit’s netlist. The format of the netlist is very similar to the standard spice netlist and any of the required changes can be easily made with a text editor. The function returns six items.  

1. report, a text string, which is the netlist report.
2. df, a Pandas data frame, which the circuit’s net list info loaded into a data frame.
3. df2, a Pandas data frame, which contains the branches with unknown currents.
4. $A$, a SymPy matrix, which is (m+n) by (m+n) and is the combination of 4 smaller matrices, G, B, C, and D. These matrices were described in Chapters 2 and 3.
5. $X$, a list that holds the unknown node voltages and the currents through the independent voltage sources.
6. $Z$, a list that holds the independent voltage and current sources

The netlist can be generated by hand or exported from a schematic capture program and pasted into a Python program.

@fig-chp4 is from @Williams1995 and was drawn using LTSpice. The nodes were labeled, otherwise LTSpice will use default labels such as N001, N002 etc. and the smna function wants integer values for the node numbers and these need to be consecutively ordered with no gaps in the numbering.

![LC Low pass filter with a cut off of 1000 Hz and $R_S = R_L = 600 \Omega$](Chapter_4_circuit.png){#fig-chp4}

LTSpice generated the following netlist:
```
* Chapter_4_circuit.asc
V1 1 0 1
R1 2 1 600
R2 3 0 600
C1 2 0 0.38µ
C2 3 0 0.38µ
L1 2 3 0.152
.end
```

The function, smna, will ignore spice directives and comments, however, some edits are needed; e-6 for $\mu$, also if V1 was an AC source, the line would need to be fixed. Independent sources are formatted as if they are DC sources. If AC analysis is performed, $j \omega$ is substituted for the Laplace variable $s$. See the test and problem circuits for the typical edits needed to fix up the netlist.

```{python}
#| echo: false
from sympy import *
import numpy as np
from tabulate import tabulate
#from scipy import signal
#import matplotlib.pyplot as plt
import pandas as pd
import SymMNA
from IPython.display import display, Markdown, Math, Latex
init_printing()
```
The edited circuit netlist shown below:
```{python}
#| echo: false
net_list = '''
V1 1 0 1
R1 2 1 600
R2 3 0 600
C1 2 0 0.38e-6
C2 3 0 0.38e-6
L1 2 3 0.152
'''
print(net_list)
```

Calling the function to generate MNA matrices:

```{python}
#| echo: true
report, network_df, i_unk_df, A, X, Z = SymMNA.smna(net_list)
```

sample report

```{python}
#| echo: false
print(report)
```

The netlist information is put into a Pandas data frame. The column definitions are listed below:

- element: type of element  
- p node: positive node  
- n node: negative node, for a current source, the arrow point terminal, LTSpice puts the inductor phasing dot on this terminal  
- cp node: controlling positive node of branch  
- cn node: controlling negative node of branch  
- Vout: opamp output node  
- value: value of element or voltage  
- Vname: voltage source through which the controlling current flows. Need to add a zero volt voltage source to the controlling branch.  
- Lname1: name of coupled inductor 1  
- Lname2: name of coupled inductor 2  


```{python}
#| echo: false
network_df
```
A second Pandas data frame is used for components having unknown currents. Unknown currents arise from inductors (L), independent voltage sources (V), op amps (O), voltage-controlled voltage sources (E), current-controlled voltage sources (H), or current-controlled current sources (F).

```{python}
#| echo: false
i_unk_df
```
The $A$ matrix describes the connectivity of the resistors, capacitors and G type (VCCS) circuit elements.

```{python}
#| echo: false
A
```

The $X$ vector is composed of the voltage unknowns to be solved for and the unknown currents from each voltage source.

```{python}
#| echo: false
X
```

The $Z$ vector is composed of the known currents and the known voltages.

```{python}
#| echo: false
Z
```

```{python}
#| echo: false
X = Matrix(X)
Z = Matrix(Z)
```
The $A$, $X$ and $Z$ matrices can be formulated in to network equations by the SymPy function Eq which represents that two objects are equal, in this case $A*X$ and $Z$.

```{python}
#| echo: true
equ = Eq(A*X,Z)

# reform X and Z into Matrix type for printing
Xp = Matrix(X)
Zp = Matrix(Z)
temp = ''
for i in range(len(X)):
    temp += '${:s}$<br>'.format(latex(Eq((A*Xp)[i:i+1][0],Zp[i])))

Markdown(temp)
```

The symbols used for the network elements, node voltages, unknown currents and mutual inductance need to be created as SymPy symbols and be included in the global namespace.

```{python}
#| echo: true
# turn the free symbols into SymPy variables
var(str(equ.free_symbols).replace('{','').replace('}',''))
```

The symbolic solution is obtained by calling the SymPy function solve, which algebraically solves equations and systems of equations.

```{python}
#| echo: true
U_sym = solve(equ,X)
```
There are three unknown node voltages, $v_1$ is just the controlled source V1.

```{python}
#| echo: false
temp = ''
for i in U_sym.keys():
    temp += '${:s} = {:s}$<br>'.format(latex(i),latex(U_sym[i]))

Markdown(temp)
```
<!--

Edit was made here!

```{python}
#| echo: false
U_sym[v1]
```
The voltage on node number 2 is:

```{python}
#| echo: false
U_sym[v2]
```

The voltage on node number 3 is:

```{python}
#| echo: false
U_sym[v3]
```

The current from V1 is :

```{python}
#| echo: false
U_sym[I_V1]
```

The current in $L_1$ is:

```{python}
#| echo: false
U_sym[I_L1]
```
-->

The symbolic transfer function of $\frac {v_3} {v_1}$ can be obtained by:

```{python}
#| echo: true
U_sym[v3]/U_sym[v1]
```

Call the function to get element values:

```{python}
#| echo: true
element_values = SymMNA.get_part_values(network_df)
element_values
```

The numerical values for the elements can be put into equations.

```{python}
#| echo: false
NE = equ.subs(element_values)

temp = ''
for i in range(shape(NE.lhs)[0]):
    temp += '${:s} = {:s}$<br>'.format(latex(NE.rhs[i]),latex(NE.lhs[i]))

Markdown(temp)
```

The network equations with actual values can then be solved by using SymPy’s solve function.

```{python}
#| echo: false
U = solve(NE,X)
```

The solution to the network equations is:

```{python}
#| echo: false
temp = ''
for i in U.keys():
    temp += '${:s} = {:s}$<br>'.format(latex(i),latex(U[i]))

Markdown(temp)
```
<!--

The voltage on node number 1 is:

```{python}
#| echo: false
U[v1]
```

The voltage on node number 2 is:

```{python}
#| echo: false
U[v2]
```

The voltage on node number 3 is:

```{python}
#| echo: false
U[v3]
```

current  V1

```{python}
#| echo: false
U[I_V1]
```
The current in $L_1$ is:

```{python}
#| echo: false
U[I_L1]
```
-->

The transfer function from node 1 to node 3 is:

```{python}
#| echo: true
U[v3]/U[v1]
```

## AC analysis
An AC analysis of the circuit can also be performed by substituting $j \omega$ for $s$ in the network equations and solving for the voltage at any desired node. The independent voltage source can be adjusted to a different amplitude and phase.

For example, we can change the independent voltage source, V1, to have an amplitude of 10 at a frequency of 10 Hz with a phase of shift of 30 degrees.

```{python}
#| echo: true
source_amp = 10
source_phase = 30 # phase in degrees
new_V1 = source_amp*np.exp(1j*(source_phase*np.pi/180))

freq_Hz = 10 #Hz
w = 2*np.pi*freq_Hz # radian frequency

element_values[V1] = new_V1
NE_Nw = equ.subs(element_values)
NE_Nw = NE_Nw.subs({s:1j*w})

temp = ''
for i in range(shape(NE_Nw.lhs)[0]):
    temp += '${:s} = {:s}$<br>'.format(latex(NE_Nw.rhs[i]),latex(NE_Nw.lhs[i]))

Markdown(temp)
```

Again, we can use the SymPy function, solve, to get a solution for $V_1 = 10 sin(2 \pi 10 t + 30)$ and print the unknown voltages and currents.
```{python}
#| echo: true
U_Nw = solve(NE_Nw,X)

table_header = ['unknown', 'mag','phase, deg']
table_row = []

for name, value in U_Nw .items():
  table_row.append([str(name),float(abs(value)),float(arg(value)*180/np.pi)])

print(tabulate(table_row, headers=table_header,colalign = ('left','decimal','decimal'),tablefmt="simple",floatfmt=('5s','.6f','.6f')))
```

The values obtained from the Python code agree with the results from LTSpice.

## Summary
In this chapter the use of the function smna(net_list) was described and an example circuit was analyzed.

