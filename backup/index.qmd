:::{.callout-note}  
Last update: 26 Jan 2024

- This book is a draft copy and only half baked.
- Many sections are still under construction.
- Only preliminary files have been posted to github.
- Spelling and grammar checks have not been completed.
- This book is posted for testing only.  
:::    

## About this book {.unnumbered}
This website is my online book - *Symbolic Modified Nodal Analysis using Python*. Symbolic circuit analysis is a circuit analysis method that derives network equations with the circuit elements represented by symbols and the topology of the circuit described by a netlist. [Python](https://en.wikipedia.org/wiki/Python_(programming_language)) is a general purpose programing lauguage with a large standard library and packages.

One of the first topics taught to electrical engineering students is basic electrical circuit analysis. This can be thought of as EE 101, and deals with circuit models not physical circuits. The current to voltage relationship for resistors is described by [Ohm’s law](https://en.wikipedia.org/wiki/Ohm%27s_law), $V=IR$, and current to voltage relationships for [capacitors](https://en.wikipedia.org/wiki/Capacitor) and [inductors](https://en.wikipedia.org/wiki/Inductor) can be described by the following differential equations:
$$i(t) = C \frac {\mathrm d v(t)}{\mathrm d t}$$
$$v(t)=L \frac {\mathrm d i(t)}{\mathrm d t}$$
Since differential equations are used to model capacitors and inductors, EE 101 is usually taught after courses in calculus and differential equations. If an electrical network has several branches or loops, then there is a family of equations that describe the circuit, and these are a system of differential equations. Most of the problems presented in textbooks are relatively simple since developing the differential equations and solving them in the time domain with pencil and paper is laborious. After subjecting their students to the rigors of time domain analysis, professors introduce phasors and frequency domain analysis using Laplace transformed circuit elements. Here the problem turns into an algebra problem and students wonder why so much classroom effort was placed on obtaining solutions by solving differential equations.

The circuit analysis technique presented in this book analyzes electrical circuits in the frequency domain. The inductors and capacitors in the circuit are replaced by their transformed values. Inductors are replace by their steady state Laplace value, $sL$, where L is the value of the inductor with units of henrys (named after [Joseph Henery](https://en.wikipedia.org/wiki/Joseph_Henry)) and $s$ is the [Laplace](https://en.wikipedia.org/wiki/Laplace_transform) variable equal to $j \omega$ where $j$ is the [imaginary number](https://en.wikipedia.org/wiki/Imaginary_number) and $\omega$ is the radian frequency. Capacitors in the circuit are replace by their steady state Laplace value, $\frac {1}{sC}$ where C is the value of the capacitor with units in farads (named after [Micheal Faraday](https://en.wikipedia.org/wiki/Michael_Faraday)).

There are 15 code validation test circuits along with a few project circuits. The chapters for each of the circuits can be referenced as examples of how to use my Python code to analyze electrical circuits.

<!--
comment on the following which are typical 1st year circuit analysis topics
resistive circuits
time domain solutions - differencial equations inductor and capacitors are descrived by the dirivative of current and voltage for each elenent type, 
phasor analysis with sinusoidal excitations mostly algebraic solutions and complex quantities
state equations - state variable are the independent capacitor voltages and inductor currents. They satify the state equations resukting from Kirchhoff's voltage and current laws. 
Fourier analysis
-->

This book was written in [R MarkDown](https://rmarkdown.rstudio.com/) using plain text files and [JupyterLab](https://jupyter.org/) notebooks. The source files were rendered into a book using [Quarto](https://quarto.org/), an open-source scientific and technical publishing system. Quarto does a good job of formatting the documents into web pages for a book. Some of the lines of code and mathematical expressions are wider than the page and Quarto inserts a slider bar in the code or equation windows. Chapter and paragraph numbering are automatically generated by Quarto as well as the numbering of figures and tables. I don't have a proof reader or professional editor for this project. Instead, I'm relying on the LibreOffice spell checker and the grammar and spellchecker of Google Docs to help me with this part of the writing process.

Source code for this book is available [here](https://github.com/Tiburonboy/Symbolic-Modified-Nodal-Analysis-using-Python/tree/main/backup) and related material is located [here](https://github.com/Tiburonboy/Symbolic-modified-nodal-analysis)

### Python module version
The following versions were used in this book.

| Package | version |
|:---|:---|
| [Python](https://www.python.org/) | 3.10.9 |
| [JupyterLab](https://jupyterlab.readthedocs.io/en/latest/) |3.5.3 |
| [IPython](https://ipython.org/) | 8.10.0 |
| [NumPy](https://numpy.org/) | 1.23.5 |
| [SymPy](https://www.sympy.org/) | 1.11.1 |
| [SciPy](https://scipy.org/) | 1.10.0 |
| [Pandas](https://pandas.pydata.org/) | 1.5.3 |
| [Tabulate](https://pypi.org/project/tabulate/) | 0.8.10 |
| [matplotlib](https://matplotlib.org/) | 3.7.0 |
| [LTSpice](https://www.analog.com/en/design-center/design-tools-and-calculators/ltspice-simulator.html) | 17.1.8 |
: Python packages {#tbl-python-packages} {tbl-colwidths="[20,20]"}

### Update History
This book will be updated occasionally to fix typos, spelling and grammer mistakes. Additionally, new content will be added as new chapters are written.

| date | description |
|:---------|:------------|
| 29 Dec 2023 | test version |
| 26 Jan 2023 | another book update |

### Project ToDo List
Since this project is still under construction, I have a list of to dos.

- [ ] fix spelling of netlist
- [ ] fix usage of spice to SPICE and define
- [ ] fix usage of Op Amp and make consistant thoughout
- [ ] clean up narrative on all the tests
- [x] add comment to each test about generating a symbolic solution
- [ ] review each schematic figures and remove SPICE directives  
- [ ] remove double spaces at end of sentences
- [ ] rewrite Two amplifier RIAA phono preamp
- [ ] cleanup new example problems
- [x] finish Summary in state variable notebook
- [ ] spell and grammar check all files
- [ ] differential equations from MNA network equations
- [ ] state equations
- [ ] add Active inductor, Nullor, Gyrator, NICs, Current Conveyor examples

<!--
- update status in /Quarto_projects/Symbolic-Modified-Nodal-Analysis-using-Python/draft_docs/To Do List.odt
- [ ] non linear circuits, see YouTube [MNA Introduction](https://www.youtube.com/watch?v=BPapfxzwsmI&list=PLlsTHbFeR7v0QG8Q4l6oc7d---eKKSKTz)

### Links to other projects
I have a blog called [Solving Engineering Problems using Python](https://tiburonboy.github.io/Solving-Engineering-Problems-using-Python/) where I post some of my Jupyter notebooks related to engineering problems and analysis. My financial analysis blog is located [here]() 
-->

### License
This work (includes python code, documentation, test circuits, etc.) is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.  
Share — copy and redistribute the material in any medium or format  
Adapt — remix, transform, and build upon the material for any purpose, even commercially.  
https://creativecommons.org/licenses/by-sa/4.0/  

<img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" />


